// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ChunkCompression {
    // message fields
    pub compression: ChunkCompression_CompressionType,
    pub compression_level: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ChunkCompression {
    pub fn new() -> ChunkCompression {
        ::std::default::Default::default()
    }

    // .chunk_dictionary.ChunkCompression.CompressionType compression = 2;

    pub fn clear_compression(&mut self) {
        self.compression = ChunkCompression_CompressionType::NONE;
    }

    // Param is passed by value, moved
    pub fn set_compression(&mut self, v: ChunkCompression_CompressionType) {
        self.compression = v;
    }

    pub fn get_compression(&self) -> ChunkCompression_CompressionType {
        self.compression
    }

    // uint32 compression_level = 3;

    pub fn clear_compression_level(&mut self) {
        self.compression_level = 0;
    }

    // Param is passed by value, moved
    pub fn set_compression_level(&mut self, v: u32) {
        self.compression_level = v;
    }

    pub fn get_compression_level(&self) -> u32 {
        self.compression_level
    }
}

impl ::protobuf::Message for ChunkCompression {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.compression, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.compression_level = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.compression != ChunkCompression_CompressionType::NONE {
            my_size += ::protobuf::rt::enum_size(2, self.compression);
        }
        if self.compression_level != 0 {
            my_size += ::protobuf::rt::value_size(3, self.compression_level, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.compression != ChunkCompression_CompressionType::NONE {
            os.write_enum(2, self.compression.value())?;
        }
        if self.compression_level != 0 {
            os.write_uint32(3, self.compression_level)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkCompression {
        ChunkCompression::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ChunkCompression_CompressionType>>(
                    "compression",
                    |m: &ChunkCompression| { &m.compression },
                    |m: &mut ChunkCompression| { &mut m.compression },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "compression_level",
                    |m: &ChunkCompression| { &m.compression_level },
                    |m: &mut ChunkCompression| { &mut m.compression_level },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkCompression>(
                    "ChunkCompression",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkCompression {
        static mut instance: ::protobuf::lazy::Lazy<ChunkCompression> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkCompression,
        };
        unsafe {
            instance.get(ChunkCompression::new)
        }
    }
}

impl ::protobuf::Clear for ChunkCompression {
    fn clear(&mut self) {
        self.clear_compression();
        self.clear_compression_level();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkCompression {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkCompression {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ChunkCompression_CompressionType {
    NONE = 0,
    LZMA = 1,
    ZSTD = 2,
}

impl ::protobuf::ProtobufEnum for ChunkCompression_CompressionType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChunkCompression_CompressionType> {
        match value {
            0 => ::std::option::Option::Some(ChunkCompression_CompressionType::NONE),
            1 => ::std::option::Option::Some(ChunkCompression_CompressionType::LZMA),
            2 => ::std::option::Option::Some(ChunkCompression_CompressionType::ZSTD),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChunkCompression_CompressionType] = &[
            ChunkCompression_CompressionType::NONE,
            ChunkCompression_CompressionType::LZMA,
            ChunkCompression_CompressionType::ZSTD,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ChunkCompression_CompressionType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ChunkCompression_CompressionType {
}

impl ::std::default::Default for ChunkCompression_CompressionType {
    fn default() -> Self {
        ChunkCompression_CompressionType::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkCompression_CompressionType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkDescriptor {
    // message fields
    pub checksum: ::std::vec::Vec<u8>,
    pub compression: ::protobuf::SingularPtrField<ChunkCompression>,
    pub archive_size: u64,
    pub archive_offset: u64,
    pub source_size: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}


impl ChunkDescriptor {
    pub fn new() -> ChunkDescriptor {
        ::std::default::Default::default()
    }

    // bytes checksum = 1;

    pub fn clear_checksum(&mut self) {
        self.checksum.clear();
    }

    // Param is passed by value, moved
    pub fn set_checksum(&mut self, v: ::std::vec::Vec<u8>) {
        self.checksum = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_checksum(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.checksum
    }

    // Take field
    pub fn take_checksum(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.checksum, ::std::vec::Vec::new())
    }

    pub fn get_checksum(&self) -> &[u8] {
        &self.checksum
    }

    // .chunk_dictionary.ChunkCompression compression = 2;

    pub fn clear_compression(&mut self) {
        self.compression.clear();
    }

    pub fn has_compression(&self) -> bool {
        self.compression.is_some()
    }

    // Param is passed by value, moved
    pub fn set_compression(&mut self, v: ChunkCompression) {
        self.compression = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_compression(&mut self) -> &mut ChunkCompression {
        if self.compression.is_none() {
            self.compression.set_default();
        }
        self.compression.as_mut().unwrap()
    }

    // Take field
    pub fn take_compression(&mut self) -> ChunkCompression {
        self.compression.take().unwrap_or_else(|| ChunkCompression::new())
    }

    pub fn get_compression(&self) -> &ChunkCompression {
        self.compression.as_ref().unwrap_or_else(|| ChunkCompression::default_instance())
    }

    // uint64 archive_size = 3;

    pub fn clear_archive_size(&mut self) {
        self.archive_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_archive_size(&mut self, v: u64) {
        self.archive_size = v;
    }

    pub fn get_archive_size(&self) -> u64 {
        self.archive_size
    }

    // uint64 archive_offset = 4;

    pub fn clear_archive_offset(&mut self) {
        self.archive_offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_archive_offset(&mut self, v: u64) {
        self.archive_offset = v;
    }

    pub fn get_archive_offset(&self) -> u64 {
        self.archive_offset
    }

    // uint64 source_size = 5;

    pub fn clear_source_size(&mut self) {
        self.source_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_source_size(&mut self, v: u64) {
        self.source_size = v;
    }

    pub fn get_source_size(&self) -> u64 {
        self.source_size
    }
}

impl ::protobuf::Message for ChunkDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.compression {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.checksum)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.compression)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.archive_size = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.archive_offset = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.source_size = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.checksum.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.checksum);
        }
        if let Some(ref v) = self.compression.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.archive_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.archive_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.archive_offset != 0 {
            my_size += ::protobuf::rt::value_size(4, self.archive_offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.source_size != 0 {
            my_size += ::protobuf::rt::value_size(5, self.source_size, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.checksum.is_empty() {
            os.write_bytes(1, &self.checksum)?;
        }
        if let Some(ref v) = self.compression.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.archive_size != 0 {
            os.write_uint64(3, self.archive_size)?;
        }
        if self.archive_offset != 0 {
            os.write_uint64(4, self.archive_offset)?;
        }
        if self.source_size != 0 {
            os.write_uint64(5, self.source_size)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkDescriptor {
        ChunkDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "checksum",
                    |m: &ChunkDescriptor| { &m.checksum },
                    |m: &mut ChunkDescriptor| { &mut m.checksum },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ChunkCompression>>(
                    "compression",
                    |m: &ChunkDescriptor| { &m.compression },
                    |m: &mut ChunkDescriptor| { &mut m.compression },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "archive_size",
                    |m: &ChunkDescriptor| { &m.archive_size },
                    |m: &mut ChunkDescriptor| { &mut m.archive_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "archive_offset",
                    |m: &ChunkDescriptor| { &m.archive_offset },
                    |m: &mut ChunkDescriptor| { &mut m.archive_offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "source_size",
                    |m: &ChunkDescriptor| { &m.source_size },
                    |m: &mut ChunkDescriptor| { &mut m.source_size },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkDescriptor>(
                    "ChunkDescriptor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkDescriptor {
        static mut instance: ::protobuf::lazy::Lazy<ChunkDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkDescriptor,
        };
        unsafe {
            instance.get(ChunkDescriptor::new)
        }
    }
}

impl ::protobuf::Clear for ChunkDescriptor {
    fn clear(&mut self) {
        self.clear_checksum();
        self.clear_compression();
        self.clear_archive_size();
        self.clear_archive_offset();
        self.clear_source_size();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkerParameters {
    // message fields
    pub chunk_filter_bits: u32,
    pub min_chunk_size: u64,
    pub max_chunk_size: u64,
    pub hash_window_size: u32,
    pub chunk_hash_length: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ChunkerParameters {
    pub fn new() -> ChunkerParameters {
        ::std::default::Default::default()
    }

    // uint32 chunk_filter_bits = 1;

    pub fn clear_chunk_filter_bits(&mut self) {
        self.chunk_filter_bits = 0;
    }

    // Param is passed by value, moved
    pub fn set_chunk_filter_bits(&mut self, v: u32) {
        self.chunk_filter_bits = v;
    }

    pub fn get_chunk_filter_bits(&self) -> u32 {
        self.chunk_filter_bits
    }

    // uint64 min_chunk_size = 2;

    pub fn clear_min_chunk_size(&mut self) {
        self.min_chunk_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_chunk_size(&mut self, v: u64) {
        self.min_chunk_size = v;
    }

    pub fn get_min_chunk_size(&self) -> u64 {
        self.min_chunk_size
    }

    // uint64 max_chunk_size = 3;

    pub fn clear_max_chunk_size(&mut self) {
        self.max_chunk_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_chunk_size(&mut self, v: u64) {
        self.max_chunk_size = v;
    }

    pub fn get_max_chunk_size(&self) -> u64 {
        self.max_chunk_size
    }

    // uint32 hash_window_size = 4;

    pub fn clear_hash_window_size(&mut self) {
        self.hash_window_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_hash_window_size(&mut self, v: u32) {
        self.hash_window_size = v;
    }

    pub fn get_hash_window_size(&self) -> u32 {
        self.hash_window_size
    }

    // uint32 chunk_hash_length = 5;

    pub fn clear_chunk_hash_length(&mut self) {
        self.chunk_hash_length = 0;
    }

    // Param is passed by value, moved
    pub fn set_chunk_hash_length(&mut self, v: u32) {
        self.chunk_hash_length = v;
    }

    pub fn get_chunk_hash_length(&self) -> u32 {
        self.chunk_hash_length
    }
}

impl ::protobuf::Message for ChunkerParameters {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.chunk_filter_bits = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_chunk_size = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_chunk_size = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hash_window_size = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.chunk_hash_length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.chunk_filter_bits != 0 {
            my_size += ::protobuf::rt::value_size(1, self.chunk_filter_bits, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_chunk_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.min_chunk_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_chunk_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.max_chunk_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hash_window_size != 0 {
            my_size += ::protobuf::rt::value_size(4, self.hash_window_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.chunk_hash_length != 0 {
            my_size += ::protobuf::rt::value_size(5, self.chunk_hash_length, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.chunk_filter_bits != 0 {
            os.write_uint32(1, self.chunk_filter_bits)?;
        }
        if self.min_chunk_size != 0 {
            os.write_uint64(2, self.min_chunk_size)?;
        }
        if self.max_chunk_size != 0 {
            os.write_uint64(3, self.max_chunk_size)?;
        }
        if self.hash_window_size != 0 {
            os.write_uint32(4, self.hash_window_size)?;
        }
        if self.chunk_hash_length != 0 {
            os.write_uint32(5, self.chunk_hash_length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkerParameters {
        ChunkerParameters::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "chunk_filter_bits",
                    |m: &ChunkerParameters| { &m.chunk_filter_bits },
                    |m: &mut ChunkerParameters| { &mut m.chunk_filter_bits },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "min_chunk_size",
                    |m: &ChunkerParameters| { &m.min_chunk_size },
                    |m: &mut ChunkerParameters| { &mut m.min_chunk_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "max_chunk_size",
                    |m: &ChunkerParameters| { &m.max_chunk_size },
                    |m: &mut ChunkerParameters| { &mut m.max_chunk_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "hash_window_size",
                    |m: &ChunkerParameters| { &m.hash_window_size },
                    |m: &mut ChunkerParameters| { &mut m.hash_window_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "chunk_hash_length",
                    |m: &ChunkerParameters| { &m.chunk_hash_length },
                    |m: &mut ChunkerParameters| { &mut m.chunk_hash_length },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkerParameters>(
                    "ChunkerParameters",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkerParameters {
        static mut instance: ::protobuf::lazy::Lazy<ChunkerParameters> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkerParameters,
        };
        unsafe {
            instance.get(ChunkerParameters::new)
        }
    }
}

impl ::protobuf::Clear for ChunkerParameters {
    fn clear(&mut self) {
        self.clear_chunk_filter_bits();
        self.clear_min_chunk_size();
        self.clear_max_chunk_size();
        self.clear_hash_window_size();
        self.clear_chunk_hash_length();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkerParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkerParameters {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkDataLocation {
    // message fields
    pub location_type: ChunkDataLocation_Type,
    pub location_path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ChunkDataLocation {
    pub fn new() -> ChunkDataLocation {
        ::std::default::Default::default()
    }

    // .chunk_dictionary.ChunkDataLocation.Type location_type = 1;

    pub fn clear_location_type(&mut self) {
        self.location_type = ChunkDataLocation_Type::INTERNAL;
    }

    // Param is passed by value, moved
    pub fn set_location_type(&mut self, v: ChunkDataLocation_Type) {
        self.location_type = v;
    }

    pub fn get_location_type(&self) -> ChunkDataLocation_Type {
        self.location_type
    }

    // string location_path = 2;

    pub fn clear_location_path(&mut self) {
        self.location_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_location_path(&mut self, v: ::std::string::String) {
        self.location_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location_path(&mut self) -> &mut ::std::string::String {
        &mut self.location_path
    }

    // Take field
    pub fn take_location_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.location_path, ::std::string::String::new())
    }

    pub fn get_location_path(&self) -> &str {
        &self.location_path
    }
}

impl ::protobuf::Message for ChunkDataLocation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.location_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.location_path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.location_type != ChunkDataLocation_Type::INTERNAL {
            my_size += ::protobuf::rt::enum_size(1, self.location_type);
        }
        if !self.location_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.location_path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.location_type != ChunkDataLocation_Type::INTERNAL {
            os.write_enum(1, self.location_type.value())?;
        }
        if !self.location_path.is_empty() {
            os.write_string(2, &self.location_path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkDataLocation {
        ChunkDataLocation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ChunkDataLocation_Type>>(
                    "location_type",
                    |m: &ChunkDataLocation| { &m.location_type },
                    |m: &mut ChunkDataLocation| { &mut m.location_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "location_path",
                    |m: &ChunkDataLocation| { &m.location_path },
                    |m: &mut ChunkDataLocation| { &mut m.location_path },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkDataLocation>(
                    "ChunkDataLocation",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkDataLocation {
        static mut instance: ::protobuf::lazy::Lazy<ChunkDataLocation> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkDataLocation,
        };
        unsafe {
            instance.get(ChunkDataLocation::new)
        }
    }
}

impl ::protobuf::Clear for ChunkDataLocation {
    fn clear(&mut self) {
        self.clear_location_type();
        self.clear_location_path();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkDataLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkDataLocation {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ChunkDataLocation_Type {
    INTERNAL = 0,
    EXTERNAL = 1,
    PER_CHUNK = 2,
}

impl ::protobuf::ProtobufEnum for ChunkDataLocation_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChunkDataLocation_Type> {
        match value {
            0 => ::std::option::Option::Some(ChunkDataLocation_Type::INTERNAL),
            1 => ::std::option::Option::Some(ChunkDataLocation_Type::EXTERNAL),
            2 => ::std::option::Option::Some(ChunkDataLocation_Type::PER_CHUNK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChunkDataLocation_Type] = &[
            ChunkDataLocation_Type::INTERNAL,
            ChunkDataLocation_Type::EXTERNAL,
            ChunkDataLocation_Type::PER_CHUNK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ChunkDataLocation_Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ChunkDataLocation_Type {
}

impl ::std::default::Default for ChunkDataLocation_Type {
    fn default() -> Self {
        ChunkDataLocation_Type::INTERNAL
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkDataLocation_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkDictionary {
    // message fields
    pub application_version: ::std::string::String,
    pub source_checksum: ::std::vec::Vec<u8>,
    pub source_total_size: u64,
    pub chunk_data_location: ::protobuf::SingularPtrField<ChunkDataLocation>,
    pub chunker_params: ::protobuf::SingularPtrField<ChunkerParameters>,
    pub rebuild_order: ::std::vec::Vec<u32>,
    pub chunk_descriptors: ::protobuf::RepeatedField<ChunkDescriptor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ChunkDictionary {
    pub fn new() -> ChunkDictionary {
        ::std::default::Default::default()
    }

    // string application_version = 1;

    pub fn clear_application_version(&mut self) {
        self.application_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_version(&mut self, v: ::std::string::String) {
        self.application_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_version(&mut self) -> &mut ::std::string::String {
        &mut self.application_version
    }

    // Take field
    pub fn take_application_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_version, ::std::string::String::new())
    }

    pub fn get_application_version(&self) -> &str {
        &self.application_version
    }

    // bytes source_checksum = 2;

    pub fn clear_source_checksum(&mut self) {
        self.source_checksum.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_checksum(&mut self, v: ::std::vec::Vec<u8>) {
        self.source_checksum = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_checksum(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.source_checksum
    }

    // Take field
    pub fn take_source_checksum(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.source_checksum, ::std::vec::Vec::new())
    }

    pub fn get_source_checksum(&self) -> &[u8] {
        &self.source_checksum
    }

    // uint64 source_total_size = 3;

    pub fn clear_source_total_size(&mut self) {
        self.source_total_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_source_total_size(&mut self, v: u64) {
        self.source_total_size = v;
    }

    pub fn get_source_total_size(&self) -> u64 {
        self.source_total_size
    }

    // .chunk_dictionary.ChunkDataLocation chunk_data_location = 4;

    pub fn clear_chunk_data_location(&mut self) {
        self.chunk_data_location.clear();
    }

    pub fn has_chunk_data_location(&self) -> bool {
        self.chunk_data_location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chunk_data_location(&mut self, v: ChunkDataLocation) {
        self.chunk_data_location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chunk_data_location(&mut self) -> &mut ChunkDataLocation {
        if self.chunk_data_location.is_none() {
            self.chunk_data_location.set_default();
        }
        self.chunk_data_location.as_mut().unwrap()
    }

    // Take field
    pub fn take_chunk_data_location(&mut self) -> ChunkDataLocation {
        self.chunk_data_location.take().unwrap_or_else(|| ChunkDataLocation::new())
    }

    pub fn get_chunk_data_location(&self) -> &ChunkDataLocation {
        self.chunk_data_location.as_ref().unwrap_or_else(|| ChunkDataLocation::default_instance())
    }

    // .chunk_dictionary.ChunkerParameters chunker_params = 5;

    pub fn clear_chunker_params(&mut self) {
        self.chunker_params.clear();
    }

    pub fn has_chunker_params(&self) -> bool {
        self.chunker_params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chunker_params(&mut self, v: ChunkerParameters) {
        self.chunker_params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chunker_params(&mut self) -> &mut ChunkerParameters {
        if self.chunker_params.is_none() {
            self.chunker_params.set_default();
        }
        self.chunker_params.as_mut().unwrap()
    }

    // Take field
    pub fn take_chunker_params(&mut self) -> ChunkerParameters {
        self.chunker_params.take().unwrap_or_else(|| ChunkerParameters::new())
    }

    pub fn get_chunker_params(&self) -> &ChunkerParameters {
        self.chunker_params.as_ref().unwrap_or_else(|| ChunkerParameters::default_instance())
    }

    // repeated uint32 rebuild_order = 6;

    pub fn clear_rebuild_order(&mut self) {
        self.rebuild_order.clear();
    }

    // Param is passed by value, moved
    pub fn set_rebuild_order(&mut self, v: ::std::vec::Vec<u32>) {
        self.rebuild_order = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rebuild_order(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.rebuild_order
    }

    // Take field
    pub fn take_rebuild_order(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.rebuild_order, ::std::vec::Vec::new())
    }

    pub fn get_rebuild_order(&self) -> &[u32] {
        &self.rebuild_order
    }

    // repeated .chunk_dictionary.ChunkDescriptor chunk_descriptors = 7;

    pub fn clear_chunk_descriptors(&mut self) {
        self.chunk_descriptors.clear();
    }

    // Param is passed by value, moved
    pub fn set_chunk_descriptors(&mut self, v: ::protobuf::RepeatedField<ChunkDescriptor>) {
        self.chunk_descriptors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chunk_descriptors(&mut self) -> &mut ::protobuf::RepeatedField<ChunkDescriptor> {
        &mut self.chunk_descriptors
    }

    // Take field
    pub fn take_chunk_descriptors(&mut self) -> ::protobuf::RepeatedField<ChunkDescriptor> {
        ::std::mem::replace(&mut self.chunk_descriptors, ::protobuf::RepeatedField::new())
    }

    pub fn get_chunk_descriptors(&self) -> &[ChunkDescriptor] {
        &self.chunk_descriptors
    }
}

impl ::protobuf::Message for ChunkDictionary {
    fn is_initialized(&self) -> bool {
        for v in &self.chunk_data_location {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.chunker_params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.chunk_descriptors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.source_checksum)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.source_total_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chunk_data_location)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chunker_params)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.rebuild_order)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.chunk_descriptors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.application_version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.application_version);
        }
        if !self.source_checksum.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.source_checksum);
        }
        if self.source_total_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.source_total_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.chunk_data_location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.chunker_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.rebuild_order {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.chunk_descriptors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.application_version.is_empty() {
            os.write_string(1, &self.application_version)?;
        }
        if !self.source_checksum.is_empty() {
            os.write_bytes(2, &self.source_checksum)?;
        }
        if self.source_total_size != 0 {
            os.write_uint64(3, self.source_total_size)?;
        }
        if let Some(ref v) = self.chunk_data_location.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.chunker_params.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.rebuild_order {
            os.write_uint32(6, *v)?;
        };
        for v in &self.chunk_descriptors {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkDictionary {
        ChunkDictionary::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_version",
                    |m: &ChunkDictionary| { &m.application_version },
                    |m: &mut ChunkDictionary| { &mut m.application_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "source_checksum",
                    |m: &ChunkDictionary| { &m.source_checksum },
                    |m: &mut ChunkDictionary| { &mut m.source_checksum },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "source_total_size",
                    |m: &ChunkDictionary| { &m.source_total_size },
                    |m: &mut ChunkDictionary| { &mut m.source_total_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ChunkDataLocation>>(
                    "chunk_data_location",
                    |m: &ChunkDictionary| { &m.chunk_data_location },
                    |m: &mut ChunkDictionary| { &mut m.chunk_data_location },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ChunkerParameters>>(
                    "chunker_params",
                    |m: &ChunkDictionary| { &m.chunker_params },
                    |m: &mut ChunkDictionary| { &mut m.chunker_params },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "rebuild_order",
                    |m: &ChunkDictionary| { &m.rebuild_order },
                    |m: &mut ChunkDictionary| { &mut m.rebuild_order },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ChunkDescriptor>>(
                    "chunk_descriptors",
                    |m: &ChunkDictionary| { &m.chunk_descriptors },
                    |m: &mut ChunkDictionary| { &mut m.chunk_descriptors },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkDictionary>(
                    "ChunkDictionary",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkDictionary {
        static mut instance: ::protobuf::lazy::Lazy<ChunkDictionary> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkDictionary,
        };
        unsafe {
            instance.get(ChunkDictionary::new)
        }
    }
}

impl ::protobuf::Clear for ChunkDictionary {
    fn clear(&mut self) {
        self.clear_application_version();
        self.clear_source_checksum();
        self.clear_source_total_size();
        self.clear_chunk_data_location();
        self.clear_chunker_params();
        self.clear_rebuild_order();
        self.clear_chunk_descriptors();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkDictionary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkDictionary {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cproto/chunk_dictionary.proto\x12\x10chunk_dictionary\"\xc6\x01\n\
    \x10ChunkCompression\x12T\n\x0bcompression\x18\x02\x20\x01(\x0e22.chunk_\
    dictionary.ChunkCompression.CompressionTypeR\x0bcompression\x12+\n\x11co\
    mpression_level\x18\x03\x20\x01(\rR\x10compressionLevel\"/\n\x0fCompress\
    ionType\x12\x08\n\x04NONE\x10\0\x12\x08\n\x04LZMA\x10\x01\x12\x08\n\x04Z\
    STD\x10\x02\"\xde\x01\n\x0fChunkDescriptor\x12\x1a\n\x08checksum\x18\x01\
    \x20\x01(\x0cR\x08checksum\x12D\n\x0bcompression\x18\x02\x20\x01(\x0b2\"\
    .chunk_dictionary.ChunkCompressionR\x0bcompression\x12!\n\x0carchive_siz\
    e\x18\x03\x20\x01(\x04R\x0barchiveSize\x12%\n\x0earchive_offset\x18\x04\
    \x20\x01(\x04R\rarchiveOffset\x12\x1f\n\x0bsource_size\x18\x05\x20\x01(\
    \x04R\nsourceSize\"\xe1\x01\n\x11ChunkerParameters\x12*\n\x11chunk_filte\
    r_bits\x18\x01\x20\x01(\rR\x0fchunkFilterBits\x12$\n\x0emin_chunk_size\
    \x18\x02\x20\x01(\x04R\x0cminChunkSize\x12$\n\x0emax_chunk_size\x18\x03\
    \x20\x01(\x04R\x0cmaxChunkSize\x12(\n\x10hash_window_size\x18\x04\x20\
    \x01(\rR\x0ehashWindowSize\x12*\n\x11chunk_hash_length\x18\x05\x20\x01(\
    \rR\x0fchunkHashLength\"\xba\x01\n\x11ChunkDataLocation\x12M\n\rlocation\
    _type\x18\x01\x20\x01(\x0e2(.chunk_dictionary.ChunkDataLocation.TypeR\
    \x0clocationType\x12#\n\rlocation_path\x18\x02\x20\x01(\tR\x0clocationPa\
    th\"1\n\x04Type\x12\x0c\n\x08INTERNAL\x10\0\x12\x0c\n\x08EXTERNAL\x10\
    \x01\x12\r\n\tPER_CHUNK\x10\x02\"\xad\x03\n\x0fChunkDictionary\x12/\n\
    \x13application_version\x18\x01\x20\x01(\tR\x12applicationVersion\x12'\n\
    \x0fsource_checksum\x18\x02\x20\x01(\x0cR\x0esourceChecksum\x12*\n\x11so\
    urce_total_size\x18\x03\x20\x01(\x04R\x0fsourceTotalSize\x12S\n\x13chunk\
    _data_location\x18\x04\x20\x01(\x0b2#.chunk_dictionary.ChunkDataLocation\
    R\x11chunkDataLocation\x12J\n\x0echunker_params\x18\x05\x20\x01(\x0b2#.c\
    hunk_dictionary.ChunkerParametersR\rchunkerParams\x12#\n\rrebuild_order\
    \x18\x06\x20\x03(\rR\x0crebuildOrder\x12N\n\x11chunk_descriptors\x18\x07\
    \x20\x03(\x0b2!.chunk_dictionary.ChunkDescriptorR\x10chunkDescriptorsJ\
    \xb8\x14\n\x06\x12\x04\0\0O\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\x08\x18\n\n\n\x02\x04\0\x12\x04\x04\0\r\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x04\x08\x18\n\x0c\n\x04\x04\0\x04\0\x12\x04\x06\
    \x04\n\x05\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x06\t\x18\n\r\n\x06\x04\0\
    \x04\0\x02\0\x12\x03\x07\x08\x11\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\
    \x03\x07\x08\x0c\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x07\x0f\x10\n\
    \r\n\x06\x04\0\x04\0\x02\x01\x12\x03\x08\x08\x11\n\x0e\n\x07\x04\0\x04\0\
    \x02\x01\x01\x12\x03\x08\x08\x0c\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\
    \x03\x08\x0f\x10\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\t\x08\x11\n\x0e\n\
    \x07\x04\0\x04\0\x02\x02\x01\x12\x03\t\x08\x0c\n\x0e\n\x07\x04\0\x04\0\
    \x02\x02\x02\x12\x03\t\x0f\x10\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0b\x04$\
    \n\r\n\x05\x04\0\x02\0\x04\x12\x04\x0b\x04\n\x05\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\x0b\x04\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b\x14\x1f\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0b\"#\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x0c\x04!\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x0c\x04\x0b$\n\x0c\
    \n\x05\x04\0\x02\x01\x05\x12\x03\x0c\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x0c\x0b\x1c\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0c\x1f\x20\n\
    \n\n\x02\x04\x01\x12\x04\x0f\0\x1d\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0f\
    \x08\x17\n+\n\x04\x04\x01\x02\0\x12\x03\x12\x04\x17\x1a\x1e\x20Hash\x20o\
    f\x20(uncompressed)\x20chunk\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x12\
    \x04\x10\x01\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x12\x04\t\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x12\n\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x12\x15\x16\n=\n\x04\x04\x01\x02\x01\x12\x03\x15\x04%\x1a0\x20Archi\
    ve\x20chunk\x20data\x20compression\x20type\x20and\x20level.\n\n\r\n\x05\
    \x04\x01\x02\x01\x04\x12\x04\x15\x04\x12\x17\n\x0c\n\x05\x04\x01\x02\x01\
    \x06\x12\x03\x15\x04\x14\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x15\x15\
    \x20\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x15#$\n/\n\x04\x04\x01\x02\
    \x02\x12\x03\x18\x04\x1c\x1a\"\x20Chunk\x20data\x20placement\x20in\x20ar\
    chive.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x18\x04\x15%\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x18\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x18\x0b\x17\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x18\x1a\x1b\
    \n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x19\x04\x1e\n\r\n\x05\x04\x01\x02\
    \x03\x04\x12\x04\x19\x04\x18\x1c\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\
    \x19\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x19\x0b\x19\n\x0c\n\
    \x05\x04\x01\x02\x03\x03\x12\x03\x19\x1c\x1d\n.\n\x04\x04\x01\x02\x04\
    \x12\x03\x1c\x04\x1b\x1a!\x20Size\x20of\x20uncompressed\x20chunk\x20data\
    \n\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04\x1c\x04\x19\x1e\n\x0c\n\x05\x04\
    \x01\x02\x04\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\
    \x03\x1c\x0b\x16\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x1c\x19\x1a\n\n\
    \n\x02\x04\x02\x12\x04\x1f\0&\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1f\x08\
    \x19\n\x0b\n\x04\x04\x02\x02\0\x12\x03!\x04!\n\r\n\x05\x04\x02\x02\0\x04\
    \x12\x04!\x04\x20\x01\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03!\x04\n\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03!\x0b\x1c\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03!\x1f\x20\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\"\x04\x1e\n\r\n\
    \x05\x04\x02\x02\x01\x04\x12\x04\"\x04!!\n\x0c\n\x05\x04\x02\x02\x01\x05\
    \x12\x03\"\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\"\x0b\x19\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03\"\x1c\x1d\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03#\x04\x1e\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04#\x04\"\x1e\n\x0c\
    \n\x05\x04\x02\x02\x02\x05\x12\x03#\x04\n\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x03#\x0b\x19\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03#\x1c\x1d\n\
    \x0b\n\x04\x04\x02\x02\x03\x12\x03$\x04\x20\n\r\n\x05\x04\x02\x02\x03\
    \x04\x12\x04$\x04#\x1e\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03$\x04\n\n\
    \x0c\n\x05\x04\x02\x02\x03\x01\x12\x03$\x0b\x1b\n\x0c\n\x05\x04\x02\x02\
    \x03\x03\x12\x03$\x1e\x1f\n\x0b\n\x04\x04\x02\x02\x04\x12\x03%\x04!\n\r\
    \n\x05\x04\x02\x02\x04\x04\x12\x04%\x04$\x20\n\x0c\n\x05\x04\x02\x02\x04\
    \x05\x12\x03%\x04\n\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03%\x0b\x1c\n\
    \x0c\n\x05\x04\x02\x02\x04\x03\x12\x03%\x1f\x20\n\n\n\x02\x04\x03\x12\
    \x04(\07\x01\n\n\n\x03\x04\x03\x01\x12\x03(\x08\x19\n\x0c\n\x04\x04\x03\
    \x04\0\x12\x04)\x042\x05\n\x0c\n\x05\x04\x03\x04\0\x01\x12\x03)\t\r\n-\n\
    \x06\x04\x03\x04\0\x02\0\x12\x03+\x08\x15\x1a\x1e\x20Chunk\x20data\x20is\
    \x20inside\x20archive\n\n\x0e\n\x07\x04\x03\x04\0\x02\0\x01\x12\x03+\x08\
    \x10\n\x0e\n\x07\x04\x03\x04\0\x02\0\x02\x12\x03+\x13\x14\n2\n\x06\x04\
    \x03\x04\0\x02\x01\x12\x03.\x08\x15\x1a#\x20Chunk\x20data\x20lives\x20in\
    \x20external\x20file\n\n\x0e\n\x07\x04\x03\x04\0\x02\x01\x01\x12\x03.\
    \x08\x10\n\x0e\n\x07\x04\x03\x04\0\x02\x01\x02\x12\x03.\x13\x14\nT\n\x06\
    \x04\x03\x04\0\x02\x02\x12\x031\x08\x16\x1aE\x20Each\x20chunk\x20is\x20i\
    n\x20a\x20separate\x20file\x20with\x20file\x20name\x20based\x20on\x20chu\
    nk\x20hash\n\n\x0e\n\x07\x04\x03\x04\0\x02\x02\x01\x12\x031\x08\x11\n\
    \x0e\n\x07\x04\x03\x04\0\x02\x02\x02\x12\x031\x14\x15\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x033\x04\x1b\n\r\n\x05\x04\x03\x02\0\x04\x12\x043\x042\
    \x05\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x033\x04\x08\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x033\t\x16\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x033\x19\x1a\
    \n@\n\x04\x04\x03\x02\x01\x12\x036\x04\x1d\x1a3\x20Path\x20to\x20be\x20u\
    sed\x20if\x20chunks\x20are\x20external\x20to\x20archive\n\n\r\n\x05\x04\
    \x03\x02\x01\x04\x12\x046\x043\x1b\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x036\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x036\x0b\x18\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x036\x1b\x1c\n\n\n\x02\x04\x04\x12\x049\0O\x01\
    \n\n\n\x03\x04\x04\x01\x12\x039\x08\x17\n7\n\x04\x04\x04\x02\0\x12\x03<\
    \x04#\x1a*\x20Dictionary\x20was\x20created\x20with\x20this\x20version\n\
    \n\r\n\x05\x04\x04\x02\0\x04\x12\x04<\x04:\x01\n\x0c\n\x05\x04\x04\x02\0\
    \x05\x12\x03<\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03<\x0b\x1e\n\x0c\
    \n\x05\x04\x04\x02\0\x03\x12\x03<!\"\n&\n\x04\x04\x04\x02\x01\x12\x03?\
    \x04\x1e\x1a\x19\x20Hash\x20of\x20the\x20source\x20file\n\n\r\n\x05\x04\
    \x04\x02\x01\x04\x12\x04?\x04<#\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03?\
    \x04\t\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03?\n\x19\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x03?\x1c\x1d\n,\n\x04\x04\x04\x02\x02\x12\x03B\x04!\
    \x1a\x1f\x20Total\x20size\x20of\x20the\x20source\x20file\n\n\r\n\x05\x04\
    \x04\x02\x02\x04\x12\x04B\x04?\x1e\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\
    \x03B\x04\n\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03B\x0b\x1c\n\x0c\n\x05\
    \x04\x04\x02\x02\x03\x12\x03B\x1f\x20\n%\n\x04\x04\x04\x02\x03\x12\x03E\
    \x04.\x1a\x18\x20Where\x20chunk\x20data\x20lives\n\n\r\n\x05\x04\x04\x02\
    \x03\x04\x12\x04E\x04B!\n\x0c\n\x05\x04\x04\x02\x03\x06\x12\x03E\x04\x15\
    \n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03E\x16)\n\x0c\n\x05\x04\x04\x02\
    \x03\x03\x12\x03E,-\n<\n\x04\x04\x04\x02\x04\x12\x03H\x04)\x1a/\x20Chunk\
    er\x20parameters\x20used\x20when\x20building\x20archive\n\n\r\n\x05\x04\
    \x04\x02\x04\x04\x12\x04H\x04E.\n\x0c\n\x05\x04\x04\x02\x04\x06\x12\x03H\
    \x04\x15\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03H\x16$\n\x0c\n\x05\x04\
    \x04\x02\x04\x03\x12\x03H'(\nT\n\x04\x04\x04\x02\x05\x12\x03K\x04&\x1aG\
    \x20Array\x20of\x20chunk\x20descriptor\x20indexes\x20describing\x20howto\
    \x20rebuild\x20the\x20source\n\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\x03K\
    \x04\x0c\n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x03K\r\x13\n\x0c\n\x05\x04\
    \x04\x02\x05\x01\x12\x03K\x14!\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03K$\
    %\nK\n\x04\x04\x04\x02\x06\x12\x03N\x043\x1a>\x20Chunk\x20descriptors\
    \x20in\x20order\x20of\x20first\x20occurence\x20in\x20source\x20file\n\n\
    \x0c\n\x05\x04\x04\x02\x06\x04\x12\x03N\x04\x0c\n\x0c\n\x05\x04\x04\x02\
    \x06\x06\x12\x03N\r\x1c\n\x0c\n\x05\x04\x04\x02\x06\x01\x12\x03N\x1d.\n\
    \x0c\n\x05\x04\x04\x02\x06\x03\x12\x03N12b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
