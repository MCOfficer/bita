// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ChunkDescriptor {
    // message fields
    pub checksum: ::std::vec::Vec<u8>,
    pub archive_size: u64,
    pub archive_offset: u64,
    pub source_size: u64,
    pub source_offsets: ::std::vec::Vec<u64>,
    // message oneof groups
    pub compression: ::std::option::Option<ChunkDescriptor_oneof_compression>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum ChunkDescriptor_oneof_compression {
    LZMA(u32),
}

impl ChunkDescriptor {
    pub fn new() -> ChunkDescriptor {
        ::std::default::Default::default()
    }

    // bytes checksum = 1;

    pub fn clear_checksum(&mut self) {
        self.checksum.clear();
    }

    // Param is passed by value, moved
    pub fn set_checksum(&mut self, v: ::std::vec::Vec<u8>) {
        self.checksum = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_checksum(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.checksum
    }

    // Take field
    pub fn take_checksum(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.checksum, ::std::vec::Vec::new())
    }

    pub fn get_checksum(&self) -> &[u8] {
        &self.checksum
    }

    // uint32 LZMA = 2;

    pub fn clear_LZMA(&mut self) {
        self.compression = ::std::option::Option::None;
    }

    pub fn has_LZMA(&self) -> bool {
        match self.compression {
            ::std::option::Option::Some(ChunkDescriptor_oneof_compression::LZMA(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_LZMA(&mut self, v: u32) {
        self.compression = ::std::option::Option::Some(ChunkDescriptor_oneof_compression::LZMA(v))
    }

    pub fn get_LZMA(&self) -> u32 {
        match self.compression {
            ::std::option::Option::Some(ChunkDescriptor_oneof_compression::LZMA(v)) => v,
            _ => 0,
        }
    }

    // uint64 archive_size = 10;

    pub fn clear_archive_size(&mut self) {
        self.archive_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_archive_size(&mut self, v: u64) {
        self.archive_size = v;
    }

    pub fn get_archive_size(&self) -> u64 {
        self.archive_size
    }

    // uint64 archive_offset = 11;

    pub fn clear_archive_offset(&mut self) {
        self.archive_offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_archive_offset(&mut self, v: u64) {
        self.archive_offset = v;
    }

    pub fn get_archive_offset(&self) -> u64 {
        self.archive_offset
    }

    // uint64 source_size = 12;

    pub fn clear_source_size(&mut self) {
        self.source_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_source_size(&mut self, v: u64) {
        self.source_size = v;
    }

    pub fn get_source_size(&self) -> u64 {
        self.source_size
    }

    // repeated uint64 source_offsets = 13;

    pub fn clear_source_offsets(&mut self) {
        self.source_offsets.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_offsets(&mut self, v: ::std::vec::Vec<u64>) {
        self.source_offsets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_source_offsets(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.source_offsets
    }

    // Take field
    pub fn take_source_offsets(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.source_offsets, ::std::vec::Vec::new())
    }

    pub fn get_source_offsets(&self) -> &[u64] {
        &self.source_offsets
    }
}

impl ::protobuf::Message for ChunkDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.checksum)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.compression = ::std::option::Option::Some(ChunkDescriptor_oneof_compression::LZMA(is.read_uint32()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.archive_size = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.archive_offset = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.source_size = tmp;
                },
                13 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.source_offsets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.checksum.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.checksum);
        }
        if self.archive_size != 0 {
            my_size += ::protobuf::rt::value_size(10, self.archive_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.archive_offset != 0 {
            my_size += ::protobuf::rt::value_size(11, self.archive_offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.source_size != 0 {
            my_size += ::protobuf::rt::value_size(12, self.source_size, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.source_offsets {
            my_size += ::protobuf::rt::value_size(13, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let ::std::option::Option::Some(ref v) = self.compression {
            match v {
                &ChunkDescriptor_oneof_compression::LZMA(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.checksum.is_empty() {
            os.write_bytes(1, &self.checksum)?;
        }
        if self.archive_size != 0 {
            os.write_uint64(10, self.archive_size)?;
        }
        if self.archive_offset != 0 {
            os.write_uint64(11, self.archive_offset)?;
        }
        if self.source_size != 0 {
            os.write_uint64(12, self.source_size)?;
        }
        for v in &self.source_offsets {
            os.write_uint64(13, *v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.compression {
            match v {
                &ChunkDescriptor_oneof_compression::LZMA(v) => {
                    os.write_uint32(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkDescriptor {
        ChunkDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "checksum",
                    |m: &ChunkDescriptor| { &m.checksum },
                    |m: &mut ChunkDescriptor| { &mut m.checksum },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                    "LZMA",
                    ChunkDescriptor::has_LZMA,
                    ChunkDescriptor::get_LZMA,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "archive_size",
                    |m: &ChunkDescriptor| { &m.archive_size },
                    |m: &mut ChunkDescriptor| { &mut m.archive_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "archive_offset",
                    |m: &ChunkDescriptor| { &m.archive_offset },
                    |m: &mut ChunkDescriptor| { &mut m.archive_offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "source_size",
                    |m: &ChunkDescriptor| { &m.source_size },
                    |m: &mut ChunkDescriptor| { &mut m.source_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "source_offsets",
                    |m: &ChunkDescriptor| { &m.source_offsets },
                    |m: &mut ChunkDescriptor| { &mut m.source_offsets },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkDescriptor>(
                    "ChunkDescriptor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkDescriptor {
        static mut instance: ::protobuf::lazy::Lazy<ChunkDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkDescriptor,
        };
        unsafe {
            instance.get(ChunkDescriptor::new)
        }
    }
}

impl ::protobuf::Clear for ChunkDescriptor {
    fn clear(&mut self) {
        self.clear_checksum();
        self.clear_LZMA();
        self.clear_archive_size();
        self.clear_archive_offset();
        self.clear_source_size();
        self.clear_source_offsets();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkerParameters {
    // message fields
    pub chunk_filter_bits: u32,
    pub min_chunk_size: u64,
    pub max_chunk_size: u64,
    pub hash_window_size: u32,
    pub chunk_hash_length: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ChunkerParameters {
    pub fn new() -> ChunkerParameters {
        ::std::default::Default::default()
    }

    // uint32 chunk_filter_bits = 1;

    pub fn clear_chunk_filter_bits(&mut self) {
        self.chunk_filter_bits = 0;
    }

    // Param is passed by value, moved
    pub fn set_chunk_filter_bits(&mut self, v: u32) {
        self.chunk_filter_bits = v;
    }

    pub fn get_chunk_filter_bits(&self) -> u32 {
        self.chunk_filter_bits
    }

    // uint64 min_chunk_size = 2;

    pub fn clear_min_chunk_size(&mut self) {
        self.min_chunk_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_chunk_size(&mut self, v: u64) {
        self.min_chunk_size = v;
    }

    pub fn get_min_chunk_size(&self) -> u64 {
        self.min_chunk_size
    }

    // uint64 max_chunk_size = 3;

    pub fn clear_max_chunk_size(&mut self) {
        self.max_chunk_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_chunk_size(&mut self, v: u64) {
        self.max_chunk_size = v;
    }

    pub fn get_max_chunk_size(&self) -> u64 {
        self.max_chunk_size
    }

    // uint32 hash_window_size = 4;

    pub fn clear_hash_window_size(&mut self) {
        self.hash_window_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_hash_window_size(&mut self, v: u32) {
        self.hash_window_size = v;
    }

    pub fn get_hash_window_size(&self) -> u32 {
        self.hash_window_size
    }

    // uint32 chunk_hash_length = 5;

    pub fn clear_chunk_hash_length(&mut self) {
        self.chunk_hash_length = 0;
    }

    // Param is passed by value, moved
    pub fn set_chunk_hash_length(&mut self, v: u32) {
        self.chunk_hash_length = v;
    }

    pub fn get_chunk_hash_length(&self) -> u32 {
        self.chunk_hash_length
    }
}

impl ::protobuf::Message for ChunkerParameters {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.chunk_filter_bits = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_chunk_size = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_chunk_size = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hash_window_size = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.chunk_hash_length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.chunk_filter_bits != 0 {
            my_size += ::protobuf::rt::value_size(1, self.chunk_filter_bits, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_chunk_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.min_chunk_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_chunk_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.max_chunk_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hash_window_size != 0 {
            my_size += ::protobuf::rt::value_size(4, self.hash_window_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.chunk_hash_length != 0 {
            my_size += ::protobuf::rt::value_size(5, self.chunk_hash_length, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.chunk_filter_bits != 0 {
            os.write_uint32(1, self.chunk_filter_bits)?;
        }
        if self.min_chunk_size != 0 {
            os.write_uint64(2, self.min_chunk_size)?;
        }
        if self.max_chunk_size != 0 {
            os.write_uint64(3, self.max_chunk_size)?;
        }
        if self.hash_window_size != 0 {
            os.write_uint32(4, self.hash_window_size)?;
        }
        if self.chunk_hash_length != 0 {
            os.write_uint32(5, self.chunk_hash_length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkerParameters {
        ChunkerParameters::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "chunk_filter_bits",
                    |m: &ChunkerParameters| { &m.chunk_filter_bits },
                    |m: &mut ChunkerParameters| { &mut m.chunk_filter_bits },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "min_chunk_size",
                    |m: &ChunkerParameters| { &m.min_chunk_size },
                    |m: &mut ChunkerParameters| { &mut m.min_chunk_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "max_chunk_size",
                    |m: &ChunkerParameters| { &m.max_chunk_size },
                    |m: &mut ChunkerParameters| { &mut m.max_chunk_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "hash_window_size",
                    |m: &ChunkerParameters| { &m.hash_window_size },
                    |m: &mut ChunkerParameters| { &mut m.hash_window_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "chunk_hash_length",
                    |m: &ChunkerParameters| { &m.chunk_hash_length },
                    |m: &mut ChunkerParameters| { &mut m.chunk_hash_length },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkerParameters>(
                    "ChunkerParameters",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkerParameters {
        static mut instance: ::protobuf::lazy::Lazy<ChunkerParameters> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkerParameters,
        };
        unsafe {
            instance.get(ChunkerParameters::new)
        }
    }
}

impl ::protobuf::Clear for ChunkerParameters {
    fn clear(&mut self) {
        self.clear_chunk_filter_bits();
        self.clear_min_chunk_size();
        self.clear_max_chunk_size();
        self.clear_hash_window_size();
        self.clear_chunk_hash_length();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkerParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkerParameters {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkDictionary {
    // message fields
    pub application_version: ::std::string::String,
    pub source_checksum: ::std::vec::Vec<u8>,
    pub source_total_size: u64,
    pub chunker_params: ::protobuf::SingularPtrField<ChunkerParameters>,
    pub chunk_descriptors: ::protobuf::RepeatedField<ChunkDescriptor>,
    // message oneof groups
    pub chunk_data_location: ::std::option::Option<ChunkDictionary_oneof_chunk_data_location>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum ChunkDictionary_oneof_chunk_data_location {
    external(::std::string::String),
    per_chunk(::std::string::String),
}

impl ChunkDictionary {
    pub fn new() -> ChunkDictionary {
        ::std::default::Default::default()
    }

    // string application_version = 1;

    pub fn clear_application_version(&mut self) {
        self.application_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_version(&mut self, v: ::std::string::String) {
        self.application_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_version(&mut self) -> &mut ::std::string::String {
        &mut self.application_version
    }

    // Take field
    pub fn take_application_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_version, ::std::string::String::new())
    }

    pub fn get_application_version(&self) -> &str {
        &self.application_version
    }

    // bytes source_checksum = 2;

    pub fn clear_source_checksum(&mut self) {
        self.source_checksum.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_checksum(&mut self, v: ::std::vec::Vec<u8>) {
        self.source_checksum = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_checksum(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.source_checksum
    }

    // Take field
    pub fn take_source_checksum(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.source_checksum, ::std::vec::Vec::new())
    }

    pub fn get_source_checksum(&self) -> &[u8] {
        &self.source_checksum
    }

    // uint64 source_total_size = 3;

    pub fn clear_source_total_size(&mut self) {
        self.source_total_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_source_total_size(&mut self, v: u64) {
        self.source_total_size = v;
    }

    pub fn get_source_total_size(&self) -> u64 {
        self.source_total_size
    }

    // string external = 4;

    pub fn clear_external(&mut self) {
        self.chunk_data_location = ::std::option::Option::None;
    }

    pub fn has_external(&self) -> bool {
        match self.chunk_data_location {
            ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::external(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_external(&mut self, v: ::std::string::String) {
        self.chunk_data_location = ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::external(v))
    }

    // Mutable pointer to the field.
    pub fn mut_external(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::external(_)) = self.chunk_data_location {
        } else {
            self.chunk_data_location = ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::external(::std::string::String::new()));
        }
        match self.chunk_data_location {
            ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::external(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_external(&mut self) -> ::std::string::String {
        if self.has_external() {
            match self.chunk_data_location.take() {
                ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::external(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    pub fn get_external(&self) -> &str {
        match self.chunk_data_location {
            ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::external(ref v)) => v,
            _ => "",
        }
    }

    // string per_chunk = 5;

    pub fn clear_per_chunk(&mut self) {
        self.chunk_data_location = ::std::option::Option::None;
    }

    pub fn has_per_chunk(&self) -> bool {
        match self.chunk_data_location {
            ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::per_chunk(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_per_chunk(&mut self, v: ::std::string::String) {
        self.chunk_data_location = ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::per_chunk(v))
    }

    // Mutable pointer to the field.
    pub fn mut_per_chunk(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::per_chunk(_)) = self.chunk_data_location {
        } else {
            self.chunk_data_location = ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::per_chunk(::std::string::String::new()));
        }
        match self.chunk_data_location {
            ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::per_chunk(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_per_chunk(&mut self) -> ::std::string::String {
        if self.has_per_chunk() {
            match self.chunk_data_location.take() {
                ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::per_chunk(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    pub fn get_per_chunk(&self) -> &str {
        match self.chunk_data_location {
            ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::per_chunk(ref v)) => v,
            _ => "",
        }
    }

    // .chunk_dictionary.ChunkerParameters chunker_params = 6;

    pub fn clear_chunker_params(&mut self) {
        self.chunker_params.clear();
    }

    pub fn has_chunker_params(&self) -> bool {
        self.chunker_params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chunker_params(&mut self, v: ChunkerParameters) {
        self.chunker_params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chunker_params(&mut self) -> &mut ChunkerParameters {
        if self.chunker_params.is_none() {
            self.chunker_params.set_default();
        }
        self.chunker_params.as_mut().unwrap()
    }

    // Take field
    pub fn take_chunker_params(&mut self) -> ChunkerParameters {
        self.chunker_params.take().unwrap_or_else(|| ChunkerParameters::new())
    }

    pub fn get_chunker_params(&self) -> &ChunkerParameters {
        self.chunker_params.as_ref().unwrap_or_else(|| ChunkerParameters::default_instance())
    }

    // repeated .chunk_dictionary.ChunkDescriptor chunk_descriptors = 10;

    pub fn clear_chunk_descriptors(&mut self) {
        self.chunk_descriptors.clear();
    }

    // Param is passed by value, moved
    pub fn set_chunk_descriptors(&mut self, v: ::protobuf::RepeatedField<ChunkDescriptor>) {
        self.chunk_descriptors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chunk_descriptors(&mut self) -> &mut ::protobuf::RepeatedField<ChunkDescriptor> {
        &mut self.chunk_descriptors
    }

    // Take field
    pub fn take_chunk_descriptors(&mut self) -> ::protobuf::RepeatedField<ChunkDescriptor> {
        ::std::mem::replace(&mut self.chunk_descriptors, ::protobuf::RepeatedField::new())
    }

    pub fn get_chunk_descriptors(&self) -> &[ChunkDescriptor] {
        &self.chunk_descriptors
    }
}

impl ::protobuf::Message for ChunkDictionary {
    fn is_initialized(&self) -> bool {
        for v in &self.chunker_params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.chunk_descriptors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.source_checksum)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.source_total_size = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chunk_data_location = ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::external(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chunk_data_location = ::std::option::Option::Some(ChunkDictionary_oneof_chunk_data_location::per_chunk(is.read_string()?));
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chunker_params)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.chunk_descriptors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.application_version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.application_version);
        }
        if !self.source_checksum.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.source_checksum);
        }
        if self.source_total_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.source_total_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.chunker_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.chunk_descriptors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.chunk_data_location {
            match v {
                &ChunkDictionary_oneof_chunk_data_location::external(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &ChunkDictionary_oneof_chunk_data_location::per_chunk(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.application_version.is_empty() {
            os.write_string(1, &self.application_version)?;
        }
        if !self.source_checksum.is_empty() {
            os.write_bytes(2, &self.source_checksum)?;
        }
        if self.source_total_size != 0 {
            os.write_uint64(3, self.source_total_size)?;
        }
        if let Some(ref v) = self.chunker_params.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.chunk_descriptors {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.chunk_data_location {
            match v {
                &ChunkDictionary_oneof_chunk_data_location::external(ref v) => {
                    os.write_string(4, v)?;
                },
                &ChunkDictionary_oneof_chunk_data_location::per_chunk(ref v) => {
                    os.write_string(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkDictionary {
        ChunkDictionary::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_version",
                    |m: &ChunkDictionary| { &m.application_version },
                    |m: &mut ChunkDictionary| { &mut m.application_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "source_checksum",
                    |m: &ChunkDictionary| { &m.source_checksum },
                    |m: &mut ChunkDictionary| { &mut m.source_checksum },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "source_total_size",
                    |m: &ChunkDictionary| { &m.source_total_size },
                    |m: &mut ChunkDictionary| { &mut m.source_total_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "external",
                    ChunkDictionary::has_external,
                    ChunkDictionary::get_external,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "per_chunk",
                    ChunkDictionary::has_per_chunk,
                    ChunkDictionary::get_per_chunk,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ChunkerParameters>>(
                    "chunker_params",
                    |m: &ChunkDictionary| { &m.chunker_params },
                    |m: &mut ChunkDictionary| { &mut m.chunker_params },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ChunkDescriptor>>(
                    "chunk_descriptors",
                    |m: &ChunkDictionary| { &m.chunk_descriptors },
                    |m: &mut ChunkDictionary| { &mut m.chunk_descriptors },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkDictionary>(
                    "ChunkDictionary",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkDictionary {
        static mut instance: ::protobuf::lazy::Lazy<ChunkDictionary> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkDictionary,
        };
        unsafe {
            instance.get(ChunkDictionary::new)
        }
    }
}

impl ::protobuf::Clear for ChunkDictionary {
    fn clear(&mut self) {
        self.clear_application_version();
        self.clear_source_checksum();
        self.clear_source_total_size();
        self.clear_external();
        self.clear_per_chunk();
        self.clear_chunker_params();
        self.clear_chunk_descriptors();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkDictionary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkDictionary {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cproto/chunk_dictionary.proto\x12\x10chunk_dictionary\"\xe4\x01\n\
    \x0fChunkDescriptor\x12\x1a\n\x08checksum\x18\x01\x20\x01(\x0cR\x08check\
    sum\x12\x14\n\x04LZMA\x18\x02\x20\x01(\rH\0R\x04lZMA\x12!\n\x0carchive_s\
    ize\x18\n\x20\x01(\x04R\x0barchiveSize\x12%\n\x0earchive_offset\x18\x0b\
    \x20\x01(\x04R\rarchiveOffset\x12\x1f\n\x0bsource_size\x18\x0c\x20\x01(\
    \x04R\nsourceSize\x12%\n\x0esource_offsets\x18\r\x20\x03(\x04R\rsourceOf\
    fsetsB\r\n\x0bcompression\"\xe1\x01\n\x11ChunkerParameters\x12*\n\x11chu\
    nk_filter_bits\x18\x01\x20\x01(\rR\x0fchunkFilterBits\x12$\n\x0emin_chun\
    k_size\x18\x02\x20\x01(\x04R\x0cminChunkSize\x12$\n\x0emax_chunk_size\
    \x18\x03\x20\x01(\x04R\x0cmaxChunkSize\x12(\n\x10hash_window_size\x18\
    \x04\x20\x01(\rR\x0ehashWindowSize\x12*\n\x11chunk_hash_length\x18\x05\
    \x20\x01(\rR\x0fchunkHashLength\"\x87\x03\n\x0fChunkDictionary\x12/\n\
    \x13application_version\x18\x01\x20\x01(\tR\x12applicationVersion\x12'\n\
    \x0fsource_checksum\x18\x02\x20\x01(\x0cR\x0esourceChecksum\x12*\n\x11so\
    urce_total_size\x18\x03\x20\x01(\x04R\x0fsourceTotalSize\x12\x1c\n\x08ex\
    ternal\x18\x04\x20\x01(\tH\0R\x08external\x12\x1d\n\tper_chunk\x18\x05\
    \x20\x01(\tH\0R\x08perChunk\x12J\n\x0echunker_params\x18\x06\x20\x01(\
    \x0b2#.chunk_dictionary.ChunkerParametersR\rchunkerParams\x12N\n\x11chun\
    k_descriptors\x18\n\x20\x03(\x0b2!.chunk_dictionary.ChunkDescriptorR\x10\
    chunkDescriptorsB\x15\n\x13chunk_data_locationJ\x95\x10\n\x06\x12\x04\0\
    \0?\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\
    \x18\n\n\n\x02\x04\0\x12\x04\x04\0\x18\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x04\x08\x17\n+\n\x04\x04\0\x02\0\x12\x03\x07\x04\x17\x1a\x1e\x20Hash\
    \x20of\x20(uncompressed)\x20chunk\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\
    \x07\x04\x05\x01\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x07\x04\t\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x07\n\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x07\x15\x16\nP\n\x04\x04\0\x08\0\x12\x04\x0b\x04\x0f\x05\x1aB\x20Ar\
    chive\x20chunk\x20data\x20compression\x20type.\n\x20No\x20compression\
    \x20if\x20not\x20set.\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x0b\n\x15\n/\
    \n\x04\x04\0\x02\x01\x12\x03\x0e\x08\x18\x1a\"\x20LZMA\x20and\x20compres\
    sion\x20level\x20(0-9)\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0e\x08\
    \x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\x0f\x13\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x0e\x16\x17\n/\n\x04\x04\0\x02\x02\x12\x03\x12\x04\
    \x1d\x1a\"\x20Chunk\x20data\x20placement\x20in\x20archive.\n\n\r\n\x05\
    \x04\0\x02\x02\x04\x12\x04\x12\x04\x0f\x05\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03\x12\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x12\x0b\x17\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x12\x1a\x1c\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\x13\x04\x1f\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x13\x04\x12\
    \x1d\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x13\x04\n\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\x13\x0b\x19\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x13\x1c\x1e\n=\n\x04\x04\0\x02\x04\x12\x03\x16\x04\x1c\x1a0\x20Size\x20\
    and\x20offsets\x20of\x20where\x20chunk\x20data\x20was\x20found\n\n\r\n\
    \x05\x04\0\x02\x04\x04\x12\x04\x16\x04\x13\x1f\n\x0c\n\x05\x04\0\x02\x04\
    \x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x16\x0b\x16\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x16\x19\x1b\n\x0b\n\x04\x04\0\x02\
    \x05\x12\x03\x17\x04(\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\x17\x04\x0c\
    \n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x17\r\x13\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x17\x14\"\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x17%'\n\
    \n\n\x02\x04\x01\x12\x04\x1a\0!\x01\n\n\n\x03\x04\x01\x01\x12\x03\x1a\
    \x08\x19\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1c\x04!\n\r\n\x05\x04\x01\
    \x02\0\x04\x12\x04\x1c\x04\x1b\x01\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\
    \x1c\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1c\x0b\x1c\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x1c\x1f\x20\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03\x1d\x04\x1e\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x1d\x04\x1c!\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\x1d\x0b\x19\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1d\
    \x1c\x1d\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x1e\x04\x1e\n\r\n\x05\x04\
    \x01\x02\x02\x04\x12\x04\x1e\x04\x1d\x1e\n\x0c\n\x05\x04\x01\x02\x02\x05\
    \x12\x03\x1e\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x1e\x0b\x19\n\
    \x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x1e\x1c\x1d\n\x0b\n\x04\x04\x01\
    \x02\x03\x12\x03\x1f\x04\x20\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04\x1f\
    \x04\x1e\x1e\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x1f\x04\n\n\x0c\n\
    \x05\x04\x01\x02\x03\x01\x12\x03\x1f\x0b\x1b\n\x0c\n\x05\x04\x01\x02\x03\
    \x03\x12\x03\x1f\x1e\x1f\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x20\x04!\n\
    \r\n\x05\x04\x01\x02\x04\x04\x12\x04\x20\x04\x1f\x20\n\x0c\n\x05\x04\x01\
    \x02\x04\x05\x12\x03\x20\x04\n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\
    \x20\x0b\x1c\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x20\x1f\x20\n\n\n\
    \x02\x04\x02\x12\x04#\0?\x01\n\n\n\x03\x04\x02\x01\x12\x03#\x08\x17\n7\n\
    \x04\x04\x02\x02\0\x12\x03&\x04#\x1a*\x20Dictionary\x20was\x20created\
    \x20with\x20this\x20version\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04&\x04$\
    \x01\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03&\x04\n\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03&\x0b\x1e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03&!\"\n&\
    \n\x04\x04\x02\x02\x01\x12\x03)\x04\x1e\x1a\x19\x20Hash\x20of\x20the\x20\
    source\x20file\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04)\x04&#\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03)\x04\t\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03)\n\x19\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03)\x1c\x1d\n,\n\
    \x04\x04\x02\x02\x02\x12\x03,\x04!\x1a\x1f\x20Total\x20size\x20of\x20the\
    \x20source\x20file\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04,\x04)\x1e\n\
    \x0c\n\x05\x04\x02\x02\x02\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x02\x01\x12\x03,\x0b\x1c\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03,\x1f\
    \x20\nQ\n\x04\x04\x02\x08\0\x12\x04/\x047\x05\x1aC\x20Where\x20chunk\x20\
    data\x20lives.\x20Inside\x20this\x20archive\x20if\x20values\x20is\x20not\
    \x20set.\n\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03/\n\x1d\nR\n\x04\x04\x02\
    \x02\x03\x12\x032\x08\x1c\x1aE\x20Chunk\x20data\x20lives\x20in\x20extern\
    al\x20file,\x20where\x20'external'\x20is\x20a\x20file\x20path.\n\n\x0c\n\
    \x05\x04\x02\x02\x03\x05\x12\x032\x08\x0e\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x032\x0f\x17\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x032\x1a\x1b\n\
    u\n\x04\x04\x02\x02\x04\x12\x036\x08\x1d\x1ah\x20Each\x20chunk\x20is\x20\
    in\x20a\x20separate\x20file\x20with\x20file\x20name\x20based\x20on\x20ch\
    unk\x20hash.\n\x20'per_chunk'\x20is\x20a\x20directory\x20path.\n\n\x0c\n\
    \x05\x04\x02\x02\x04\x05\x12\x036\x08\x0e\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x036\x0f\x18\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x036\x1b\x1c\n\
    <\n\x04\x04\x02\x02\x05\x12\x03:\x04)\x1a/\x20Chunker\x20parameters\x20u\
    sed\x20when\x20building\x20archive\n\n\r\n\x05\x04\x02\x02\x05\x04\x12\
    \x04:\x047\x05\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\x03:\x04\x15\n\x0c\n\
    \x05\x04\x02\x02\x05\x01\x12\x03:\x16$\n\x0c\n\x05\x04\x02\x02\x05\x03\
    \x12\x03:'(\nZ\n\x04\x04\x02\x02\x06\x12\x03>\x044\x1aM\x20Array\x20of\
    \x20chunk\x20descriptors.\x20In\x20order\x20of\x20(first)\x20occurrence\
    \x20in\x20source\n\x20file.\n\n\x0c\n\x05\x04\x02\x02\x06\x04\x12\x03>\
    \x04\x0c\n\x0c\n\x05\x04\x02\x02\x06\x06\x12\x03>\r\x1c\n\x0c\n\x05\x04\
    \x02\x02\x06\x01\x12\x03>\x1d.\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03>1\
    3b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
